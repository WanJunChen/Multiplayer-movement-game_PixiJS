#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('gathertown-achievementsystem-new:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`Example app listening at http://localhost:${port}`)
});
server.on('error', onError);
server.on('listening', onListening);

/** 
 * Socket.io
 * 
 * socket.emit — 用於發送事件
 * socket.on — 用於監聽事件
 * io.sockets.emit — Server對所有連接的Client發送事件
 * socket.broadcast.emit — Client給自己以外的Client發送事件
*/
var socket = require('socket.io');
var io = socket(server);

  // const Game = require('../public/javascripts/game');
  // const game = new Game();
// Listen for socket.io connections
io.on("connection", onConnection = (socket) => {
  
  console.log('Socket.io connected');

  // 建立一個 "sendMessage" 事件的監聽
  socket.on("sendMessage", function (message) {
    // 當收到事件的時候，也發送一個 "allMessage" 事件給所有的連線用戶
    io.emit("allMessage", message);
    console.log(message);

  })

  socket.on('disconnect', onDisconnect => {
    console.log('Socket.io disconnected');
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
